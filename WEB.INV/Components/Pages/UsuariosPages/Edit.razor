@page "/usuarios/edit"
@using Microsoft.EntityFrameworkCore
@using NTI.INV
@inject IDbContextFactory<DBContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Usuarios</h2>
<hr />
@if (Usuarios is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Usuarios" OnValidSubmit="UpdateUsuarios" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Usuarios.Codigo" value="@Usuarios.Codigo" />
                <div class="mb-3">
                    <label for="nombre" class="form-label">Nombre:</label>
                    <InputText id="nombre" @bind-Value="Usuarios.Nombre" class="form-control" />
                    <ValidationMessage For="() => Usuarios.Nombre" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="correo" class="form-label">Correo:</label>
                    <InputText id="correo" @bind-Value="Usuarios.Correo" class="form-control" />
                    <ValidationMessage For="() => Usuarios.Correo" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="usuario" class="form-label">Usuario:</label>
                    <InputText id="usuario" @bind-Value="Usuarios.Usuario" class="form-control" />
                    <ValidationMessage For="() => Usuarios.Usuario" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Password:</label>
                    <InputText id="password" @bind-Value="Usuarios.Password" class="form-control" />
                    <ValidationMessage For="() => Usuarios.Password" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="idpermisos" class="form-label">IdPermisos:</label>
                    <InputText id="idpermisos" @bind-Value="Usuarios.IdPermisos" class="form-control" />
                    <ValidationMessage For="() => Usuarios.IdPermisos" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/usuarios">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private string Codigo { get; set; }

    [SupplyParameterFromForm]
    private Usuarios? Usuarios { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Usuarios ??= await context.Usuarios.FirstOrDefaultAsync(m => m.Codigo == Codigo);

        if (Usuarios is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateUsuarios()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Usuarios!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!UsuariosExists(Usuarios!.Codigo))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/usuarios");
    }

    private bool UsuariosExists(string codigo)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Usuarios.Any(e => e.Codigo == codigo);
    }
}
