@page "/permisos/edit"
@using Microsoft.EntityFrameworkCore
@using WEB.INT
@inject IDbContextFactory<DBContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Editar Permiso</PageTitle>

<div class="container mt-5">
    <div class="card shadow-lg border-0">
        <div class="card-header bg-warning text-dark">
            <h3 class="mb-0">Editar Permiso</h3>
        </div>
        <div class="card-body">
            @if (Permisos is null)
            {
                <div class="text-center">
                    <div class="spinner-border text-warning" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                    <p class="mt-3"><em>Cargando datos...</em></p>
                </div>
            }
            else
            {
                <EditForm method="post" Model="Permisos" OnValidSubmit="UpdatePermisos" FormName="edit" Enhance>
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger" role="alert" />

                    <input type="hidden" name="Permisos.IdPermisos" value="@Permisos.IdPermisos" />

                    <!-- Campo TipoPermiso -->
                    <div class="mb-3">
                        <label for="tipopermiso" class="form-label">Tipo de Permiso:</label>
                        <InputText id="tipopermiso" @bind-Value="Permisos.TipoPermiso" class="form-control" />
                        <ValidationMessage For="() => Permisos.TipoPermiso" class="text-danger" />
                    </div>

                    <!-- Botones -->
                    <div class="d-flex justify-content-between mt-4">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save"></i> Guardar
                        </button>
                        <a href="/permisos" class="btn btn-secondary">
                            <i class="fas fa-arrow-left"></i> Volver a la lista
                        </a>
                    </div>
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    private string IdPermisos { get; set; }

    [SupplyParameterFromForm]
    private Permisos? Permisos { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Permisos ??= await context.Permisos.FirstOrDefaultAsync(m => m.IdPermisos == IdPermisos);

        if (Permisos is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdatePermisos()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Permisos!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!PermisosExists(Permisos!.IdPermisos))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/permisos");
    }

    private bool PermisosExists(string idpermisos)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Permisos.Any(e => e.IdPermisos == idpermisos);
    }
}
