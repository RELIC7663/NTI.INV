@page "/productos/details"
@using Microsoft.EntityFrameworkCore
@using WEB.INT
@inject IDbContextFactory<DBContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Productos</h2>
    <hr />
    @if (productos is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Nombre</dt>
            <dd class="col-sm-10">@productos.Nombre</dd>
            <dt class="col-sm-2">IdCategoria</dt>
            <dd class="col-sm-10">@productos.IdCategoria</dd>
            <dt class="col-sm-2">Precio</dt>
            <dd class="col-sm-10">@productos.Precio</dd>
            <dt class="col-sm-2">Stock</dt>
            <dd class="col-sm-10">@productos.Stock</dd>
        </dl>
        <div>
            <a href="@($"/productos/edit?codigo={productos.Codigo}")">Edit</a> |
            <a href="@($"/productos")">Back to List</a>
        </div>
    }
</div>

@code {
    private Productos? productos;

    [SupplyParameterFromQuery]
    private string Codigo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        productos = await context.Productos.FirstOrDefaultAsync(m => m.Codigo == Codigo);

        if (productos is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
