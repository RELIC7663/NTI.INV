@page "/productos/edit"
@using Microsoft.EntityFrameworkCore
@using WEB.INT
@inject IDbContextFactory<DBContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Editar Producto</PageTitle>

<div class="container mt-5">
    <div class="card shadow-lg border-0">
        <div class="card-header bg-warning text-dark">
            <h3 class="mb-0">Editar Producto</h3>
        </div>
        <div class="card-body">
            <EditForm method="post" Model="Productos" OnValidSubmit="UpdateProductos" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary class="alert alert-danger" role="alert" />

                <div class="row">
                    <!-- Nombre -->
                    <div class="col-md-6 mb-3">
                        <label for="nombre" class="form-label">Nombre:</label>
                        <InputText id="nombre" @bind-Value="Productos.Nombre" class="form-control " placeholder="Ingrese el nombre del producto" />
                        <ValidationMessage For="() => Productos.Nombre" class="text-danger" />
                    </div>

                    <!-- IdCategoria -->
                    <div class="col-md-6 mb-3">
                        <label for="idcategoria" class="form-label">Categoría:</label>
                        <InputText id="idcategoria" @bind-Value="Productos.IdCategoria" class="form-control " placeholder="Ingrese el ID de la categoría" />
                        <ValidationMessage For="() => Productos.IdCategoria" class="text-danger" />
                    </div>
                </div>

                <div class="row">
                    <!-- Precio -->
                    <div class="col-md-6 mb-3">
                        <label for="precio" class="form-label">Precio:</label>
                        <InputNumber id="precio" @bind-Value="Productos.Precio" class="form-control " placeholder="Ingrese el precio" />
                        <ValidationMessage For="() => Productos.Precio" class="text-danger" />
                    </div>

                    <!-- Stock -->
                    <div class="col-md-6 mb-3">
                        <label for="stock" class="form-label">Stock:</label>
                        <InputNumber id="stock" @bind-Value="Productos.Stock" class="form-control " placeholder="Ingrese el stock disponible" />
                        <ValidationMessage For="() => Productos.Stock" class="text-danger" />
                    </div>
                </div>

                <!-- Botones -->
                <div class="d-flex justify-content-between mt-4">
                    <button type="submit" class="btn btn-primary ">
                        <i class="fas fa-save"></i> Guardar Cambios
                    </button>
                    <a href="/productos" class="btn btn-secondary ">
                        <i class="fas fa-arrow-left"></i> Volver a la lista
                    </a>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    private string Codigo { get; set; } = default!;

    [SupplyParameterFromForm]
    private Productos Productos { get; set; } = new();

    private async Task UpdateProductos()
    {
        using var context = DbFactory.CreateDbContext();
        var productoExistente = await context.Productos.FindAsync(Codigo);

        if (productoExistente is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        productoExistente.Nombre = Productos.Nombre;
        productoExistente.IdCategoria = Productos.IdCategoria;
        productoExistente.Precio = Productos.Precio;
        productoExistente.Stock = Productos.Stock;

        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/productos");
    }
}
