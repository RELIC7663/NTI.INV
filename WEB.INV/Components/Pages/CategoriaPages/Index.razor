@page "/categoria"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using WEB.INT
@inject IDbContextFactory<DBContext> DbFactory

<PageTitle>Categorías</PageTitle>

<h1>Categorías</h1>

<p>
    <a href="categoria/create">Crear Nueva</a>
</p>

@if (categorias is null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <QuickGrid Class="table" Items="categorias?.AsQueryable()">

        <PropertyColumn Property="categoria => categoria.Nombre" />

        <TemplateColumn Context="categoria">
            <a href="@($"categoria/edit?idcategoria={categoria.IdCategoria}")">Editar</a> |
            <a href="@($"categoria/details?idcategoria={categoria.IdCategoria}")">Detalles</a> |
            <a href="@($"categoria/delete?idcategoria={categoria.IdCategoria}")">Eliminar</a>
        </TemplateColumn>
    </QuickGrid>
}

@code {
    private List<Categoria>? categorias;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategoriasAsync();
    }

    private async Task LoadCategoriasAsync()
    {
        await using var context = await DbFactory.CreateDbContextAsync(); //  Crea un nuevo DbContext para cada operación
        categorias = await context.Categoria.ToListAsync();
        StateHasChanged(); // Actualiza la UI
    }
}
