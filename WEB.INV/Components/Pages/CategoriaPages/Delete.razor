@page "/categoria/delete"
@using Microsoft.EntityFrameworkCore
@using WEB.INT
@inject IDbContextFactory<DBContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete Categoria</PageTitle>

<div class="container mt-5">
    <div class="card shadow-lg border-0">
        <div class="card-header bg-danger text-white">
            <h3 class="mb-0">Eliminar Categoría</h3>
        </div>
        <div class="card-body">
            <p class="text-muted">¿Estás seguro de que deseas eliminar esta categoría? Esta acción no se puede deshacer.</p>
            <hr />
            @if (categoria is null)
            {
                <div class="text-center">
                    <div class="spinner-border text-danger" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                    <p class="mt-2"><em>Cargando...</em></p>
                </div>
            }
            else
            {
                <dl class="row">
                    <dt class="col-sm-3 font-weight-bold">Nombre:</dt>
                    <dd class="col-sm-9">@categoria.Nombre</dd>
                </dl>

                <EditForm method="post" Model="categoria" OnValidSubmit="DeleteCategoria" FormName="delete" Enhance>
                    <div class="d-flex justify-content-between mt-4">
                        <button type="submit" class="btn btn-danger" disabled="@(categoria is null)">
                            <i class="fas fa-trash-alt"></i> Eliminar
                        </button>
                        <a href="/categoria" class="btn btn-secondary">
                            <i class="fas fa-arrow-left"></i> Volver a la lista
                        </a>
                    </div>
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    private Categoria? categoria;

    [SupplyParameterFromQuery]
    private string IdCategoria { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        categoria = await context.Categoria.FirstOrDefaultAsync(m => m.IdCategoria == IdCategoria);

        if (categoria is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteCategoria()
    {
        using var context = DbFactory.CreateDbContext();
        context.Categoria.Remove(categoria!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/categoria");
    }
}
